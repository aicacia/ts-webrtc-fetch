import{bytesToInteger as e,integerToBytes as t}from"https://unpkg.com/@aicacia/hash@0/browser/index.js";import{MAX_INT as n}from"https://unpkg.com/@aicacia/rand@0/browser/index.js";const r=4096,a=/^([^: \t]+):[ \t]*((?:.*[^ \t])|)/,o=/^[ \t]+(.*[^ \t])/,i=/^([A-Z-]+) ([^ ]+) HTTP\/(\d)\.(\d)$/,s=/^HTTP\/(\d)\.(\d) (\d{3}) ?(.*)$/,c="\n".charCodeAt(0),w="\r".charCodeAt(0),d=new TextEncoder,f=new TextDecoder;class u extends Request{constructor(e,t){const n=t?.headers;if(super(e,t),n){const e=new Headers(n);Object.defineProperty(this,"headers",{value:e,writable:!1})}}}async function l(e,t={mode:"same-origin",credentials:"include"}){const n=m(e),[r,a]=await async function(e){const{done:t,value:n}=await e.readLine();if(t)throw new Error("Unexpected end of request");const r=i.exec(n);if(!r)throw new Error(`Invalid request line: ${n}`);return[r[1],r[2],+r[3],+r[4]]}(n),[o,s,c]=await g(n),w=b(n,s,c);return new u(a,{...t,method:r,headers:o,body:w,duplex:"half"})}async function y(e){const t=m(e),[n,r]=await async function(e){const{done:t,value:n}=await e.readLine();if(t)throw new Error("Unexpected end of request");const r=s.exec(n);if(!r)throw new Error(`Invalid response line: ${n}`);return[+r[3],r[4],+r[1],+r[2]]}(t),[a,o,i]=await g(t),c=b(t,o,i);return new Response(c,{status:n,statusText:r,headers:a})}async function h(e,t){const n=e.getWriter();let r=!1;try{const[a,o]=t instanceof Request?[t,null]:[null,t];a?await n.write(d.encode(`${a.method} ${a.url} HTTP/1.1\r\n`)):await n.write(d.encode(`HTTP/1.1 ${o.status} ${o.statusText}\r\n`));const i=new Headers(t.headers);if(t.body)if(a){const e=await async function(e){try{const{done:t,value:n}=await e.read();if(t)return new Uint8Array;let r=n;for(;;){const{done:t,value:n}=await e.read();if(t)break;r=L(r,n)}return r}finally{e.releaseLock()}}(t.body.getReader());i.set("Content-Length",`${e.byteLength}`);for(const[e,t]of i.entries())await n.write(d.encode(`${e}: ${t}\r\n`));await n.write(d.encode("\r\n")),await n.write(e)}else{const a=Number.parseInt(i.get("Content-Length")||"0",10),o="chunked"===i.get("Transfer-Encoding")?.toLowerCase();for(const[e,t]of i.entries())await n.write(d.encode(`${e}: ${t}\r\n`));await n.write(d.encode("\r\n")),n.releaseLock(),await(b(m(t.body.getReader()),o,a)?.pipeTo(e)),r=!0}else{for(const[e,t]of i.entries())await n.write(d.encode(`${e}: ${t}\r\n`));await n.write(d.encode("\r\n"))}}finally{r||(n.releaseLock(),e.close())}}async function g(e){const t=new Headers;let n=!1,r=0;for(;;){const{done:i,value:s}=await e.readLine();if(i)throw new Error("Unexpected end of headers");if(""===s)break;const c=a.exec(s);if(!c)throw new Error(`Invalid header line: ${s}`);let w=c[2];for(;;){const e=o.exec(w);if(!e)break;w=e[1]}const d=c[1].toLowerCase();"transfer-encoding"===d&&"chunked"===w.toLowerCase()?n=!0:"content-length"===d&&(r=+w),t.append(c[1],w)}return[t,n,r]}function b(e,t,n){if(!t&&0===n)return null;const r=new TransformStream;return async function(e,t,n,r){const o=t.getWriter();try{if(n)for(;;){const{done:t,value:n}=await e.readLine();if(t)throw new Error("Unexpected end of stream");if(a.exec(n)){await e.readLine();break}const r=Number.parseInt(n,16);if(!r)break;let i=r;for(;i>0;){const{done:t,value:n}=await e.read(r);if(t)throw new Error("Unexpected end of stream");i-=n.byteLength,await o.write(n)}await e.readLine()}else{let t=r;for(;t>0;){const{done:n,value:r}=await e.read(t);if(n)throw new Error("Unexpected end of stream");t-=r.byteLength,await o.write(r)}}}finally{e.releaseLock(),o.releaseLock(),t.close()}}(e,r.writable,t,n),r.readable}function m(e,t=r){let n=new Uint8Array(t),a=0,o=0,i=!1;async function s(t){if(i)return t<o;for(;t>=o;){const{done:t,value:r}=await e.read();if(t){i=!0;break}n=p(n,o,r),o+=r.byteLength}return t<o}return{readLine:async function(){let e=a,t=await s(e);for(;t;){if(n[e]===c){const t=n[e-1]===w?e-1:e,r=f.decode(n.slice(a,t));return a=e+1,{done:!1,value:r}}e++,e>=o&&(t=await s(e))}return{done:!0}},read:async function(e){const t=a+e;await s(t-1);const r=Math.min(o-a,e);if(0===r)return{done:!0};const i=n.slice(a,a+r);return a+=r,{done:!1,value:i}},releaseLock:function(){e.releaseLock()}}}function L(e,t){const n=new Uint8Array(e.byteLength+t.byteLength);return n.set(e),n.set(t,e.byteLength),n}function p(e,t,n){if(n.byteLength>=e.byteLength-t){const r=new Uint8Array(2*e.byteLength);return r.set(e),r.set(n,t),r}return e.set(n,t),e}const v=4096;function x(){return Math.random()*n|0}function k(e,t,n){return new WritableStream({write(r){!function(e,t,n){if(t.byteLength<n)e.send(t);else{let r=0;for(;r<t.byteLength;){const a=Math.min(n,t.byteLength-r);e.send(t.slice(r,r+a)),r+=a}}}(e,L(t,r),n)}})}function T(e,t=v){const n=new Uint8Array(t);let r=0;const a=e.getWriter();async function o(){r>0&&(await a.write(n.slice(0,r)),r=0)}return new WritableStream({write:async function(e){let a=0;for(;a<e.byteLength;){r>=t&&await o();const i=Math.min(t-r,e.byteLength-a);n.set(e.slice(a,a+i),r),r+=i,a+=i}},async close(){await o(),await a.close()}})}function $(n){const r=new Map;async function a(t){const n=new Uint8Array(t.data),a=e(n);await async function(e,t){const n=r.get(e);if(!n)throw new Error(`No connection found for id: ${e}`);await n.writer.write(t)}(a,n.slice(4))}n.addEventListener("message",a);const o=(e,a)=>new Promise(((o,i)=>{const s=new u(e,a),c=function(){let e=x();for(;r.has(e);)e=x();const n=t(new Uint8Array(4),e),a=new TransformStream,o={idBytes:n,stream:a,writer:a.writable.getWriter()};return r.set(e,o),o}();h(T(k(n,c.idBytes,16384)),s).then((()=>y(c.stream.readable.getReader()).then(o))).catch(i)}));return o.destroy=()=>n.removeEventListener("message",a),o}function E(n,r){const a=new Map;async function o(e,o){let i=a.get(e);i||(i=function(){const e=new TransformStream;return{stream:e,writer:e.writable.getWriter()}}(),a.set(e,i),async function(e,a){const o=await l(a.stream.readable.getReader()),i=await r(o),s=T(k(n,t(new Uint8Array(4),e),16384));await h(s,i)}(e,i)),await i.writer.write(o)}async function i(t){const n=new Uint8Array(t.data),r=e(n);await o(r,n.slice(4))}return n.addEventListener("message",i),()=>{n.removeEventListener("message",i)}}export{$ as createWebRTCFetch,E as createWebRTCServer};
//# sourceMappingURL=index.js.map
