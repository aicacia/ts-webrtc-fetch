{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/createWebRTCFetch.ts","../src/createWebRTCServer.ts"],"sourcesContent":["import { MAX_INT } from \"@aicacia/rand\";\n\nexport const PROTOCAL_NAME = \"HTTP-WEBRTC\";\nexport const PROTOCAL_VERSION = \"1.0\";\nexport const PROTOCAL = `${PROTOCAL_NAME}/${PROTOCAL_VERSION}`;\n\nexport const DEFAULT_TIMEOUT_MS = 60_000;\n\nexport const R = \"\\r\".charCodeAt(0);\nexport const N = \"\\n\".charCodeAt(0);\n\nexport function encodeLine(\n\tencoder: TextEncoder,\n\tidBytes: Uint8Array,\n\tline: string,\n) {\n\tconst lineBytes = encoder.encode(line);\n\treturn concatUint8Array(idBytes, lineBytes);\n}\n\nexport function concatUint8Array(a: Uint8Array, b: Uint8Array) {\n\tconst bytes = new Uint8Array(a.length + b.length);\n\tbytes.set(a);\n\tbytes.set(b, a.length);\n\treturn bytes;\n}\n\nexport function randomUInt32() {\n\treturn (Math.random() * MAX_INT) | 0;\n}\n\nexport function statusCodeToStatusText(statusCode: number): string {\n\tswitch (statusCode) {\n\t\tcase 100:\n\t\t\treturn \"Continue\";\n\t\tcase 101:\n\t\t\treturn \"Switching Protocols\";\n\t\tcase 102:\n\t\t\treturn \"Processing\";\n\t\tcase 103:\n\t\t\treturn \"Early Hints\";\n\t\tcase 200:\n\t\t\treturn \"OK\";\n\t\tcase 201:\n\t\t\treturn \"Created\";\n\t\tcase 202:\n\t\t\treturn \"Accepted\";\n\t\tcase 203:\n\t\t\treturn \"Non-Authoritative Information\";\n\t\tcase 204:\n\t\t\treturn \"No Content\";\n\t\tcase 205:\n\t\t\treturn \"Reset Content\";\n\t\tcase 206:\n\t\t\treturn \"Partial Content\";\n\t\tcase 207:\n\t\t\treturn \"Multi-Status\";\n\t\tcase 208:\n\t\t\treturn \"Already Reported\";\n\t\tcase 226:\n\t\t\treturn \"IM Used\";\n\t\tcase 300:\n\t\t\treturn \"Multiple Choices\";\n\t\tcase 301:\n\t\t\treturn \"Moved Permanently\";\n\t\tcase 302:\n\t\t\treturn \"Found\";\n\t\tcase 303:\n\t\t\treturn \"See Other\";\n\t\tcase 304:\n\t\t\treturn \"Not Modified\";\n\t\tcase 305:\n\t\t\treturn \"Use Proxy\";\n\t\tcase 306:\n\t\t\treturn \"Switch Proxy\";\n\t\tcase 307:\n\t\t\treturn \"Temporary Redirect\";\n\t\tcase 308:\n\t\t\treturn \"Permanent Redirect\";\n\t\tcase 400:\n\t\t\treturn \"Bad Request\";\n\t\tcase 401:\n\t\t\treturn \"Unauthorized\";\n\t\tcase 402:\n\t\t\treturn \"Payment Required\";\n\t\tcase 403:\n\t\t\treturn \"Forbidden\";\n\t\tcase 404:\n\t\t\treturn \"Not Found\";\n\t\tcase 405:\n\t\t\treturn \"Method Not Allowed\";\n\t\tcase 406:\n\t\t\treturn \"Not Acceptable\";\n\t\tcase 407:\n\t\t\treturn \"Proxy Authentication Required\";\n\t\tcase 408:\n\t\t\treturn \"Request Timeout\";\n\t\tcase 409:\n\t\t\treturn \"Conflict\";\n\t\tcase 410:\n\t\t\treturn \"Gone\";\n\t\tcase 411:\n\t\t\treturn \"Length Required\";\n\t\tcase 412:\n\t\t\treturn \"Precondition Failed\";\n\t\tcase 413:\n\t\t\treturn \"Payload Too Large\";\n\t\tcase 414:\n\t\t\treturn \"URI Too Long\";\n\t\tcase 415:\n\t\t\treturn \"Unsupported Media Type\";\n\t\tcase 416:\n\t\t\treturn \"Range Not Satisfiable\";\n\t\tcase 417:\n\t\t\treturn \"Expectation Failed\";\n\t\tcase 418:\n\t\t\treturn \"I'm a teapot\";\n\t\tcase 421:\n\t\t\treturn \"Misdirected Request\";\n\t\tcase 422:\n\t\t\treturn \"Unprocessable Entity\";\n\t\tcase 423:\n\t\t\treturn \"Locked\";\n\t\tcase 424:\n\t\t\treturn \"Failed Dependency\";\n\t\tcase 425:\n\t\t\treturn \"Too Early\";\n\t\tcase 426:\n\t\t\treturn \"Upgrade Required\";\n\t\tcase 428:\n\t\t\treturn \"Precondition Required\";\n\t\tcase 429:\n\t\t\treturn \"Too Many Requests\";\n\t\tcase 431:\n\t\t\treturn \"Request Header Fields Too Large\";\n\t\tcase 451:\n\t\t\treturn \"Unavailable For Legal Reasons\";\n\t\tcase 500:\n\t\t\treturn \"Internal Server Error\";\n\t\tcase 501:\n\t\t\treturn \"Not Implemented\";\n\t\tcase 502:\n\t\t\treturn \"Bad Gateway\";\n\t\tcase 503:\n\t\t\treturn \"Service Unavailable\";\n\t\tcase 504:\n\t\t\treturn \"Gateway Timeout\";\n\t\tcase 505:\n\t\t\treturn \"HTTP Version Not Supported\";\n\t\tcase 506:\n\t\t\treturn \"Variant Also Negotiates\";\n\t\tcase 507:\n\t\t\treturn \"Insufficient Storage\";\n\t\tcase 508:\n\t\t\treturn \"Loop Detected\";\n\t\tcase 510:\n\t\t\treturn \"Not Extended\";\n\t\tcase 511:\n\t\t\treturn \"Network Authentication Required\";\n\t\tdefault:\n\t\t\treturn \"Unknown Status Code\";\n\t}\n}\n","import { bytesToInteger, integerToBytes } from \"@aicacia/hash\";\nimport {\n\tDEFAULT_TIMEOUT_MS,\n\tN,\n\tPROTOCAL,\n\tR,\n\tconcatUint8Array,\n\tencodeLine,\n\trandomUInt32,\n} from \"./utils\";\n\ntype Fetch = typeof fetch;\n\nexport type WebRTCFetch = Fetch & {\n\tdestroy(): void;\n};\n\ntype WebRTCConnection = {\n\tconnectionId: number;\n\turl: URL;\n\thandled: boolean;\n\treadStatus: boolean;\n\treadHeaders: boolean;\n\theaders: Headers;\n\tstatus: number;\n\tstatusText: string;\n\tstream: TransformStream;\n\twriter: WritableStreamDefaultWriter<Uint8Array>;\n\ttimeoutId?: ReturnType<typeof setTimeout>;\n\thandle: (error: Error | undefined, response?: Response) => void;\n};\n\nfunction webRTCConnectionToNativeResponse(\n\twebRTCConnection: WebRTCConnection,\n): Response {\n\tconst response = new Response(webRTCConnection.stream.readable, {\n\t\tstatus: webRTCConnection.status,\n\t\tstatusText: webRTCConnection.statusText,\n\t\theaders: webRTCConnection.headers,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-expect-error\n\t\tduplex: \"half\",\n\t});\n\tObject.defineProperty(response, \"url\", {\n\t\tvalue: `webrtc-http:${webRTCConnection.url.pathname}${webRTCConnection.url.search}`,\n\t});\n\treturn response;\n}\n\nexport function createWebRTCFetch(channel: RTCDataChannel): WebRTCFetch {\n\tconst responses = new Map<number, WebRTCConnection>();\n\tconst textEncoder = new TextEncoder();\n\tconst textDecoder = new TextDecoder();\n\n\tfunction createWebRTCConnection(\n\t\tconnectionId: number,\n\t\trequest: Request,\n\t\tresolve: (response: Response) => void,\n\t\treject: (error: Error) => void,\n\t) {\n\t\tconst stream = new TransformStream();\n\t\tconst WebRTCConnection: WebRTCConnection = {\n\t\t\tconnectionId,\n\t\t\turl: new URL(request.url),\n\t\t\thandled: false,\n\t\t\treadStatus: false,\n\t\t\treadHeaders: false,\n\t\t\theaders: new Headers(),\n\t\t\tstatus: 200,\n\t\t\tstatusText: \"\",\n\t\t\tstream,\n\t\t\twriter: stream.writable.getWriter(),\n\t\t\thandle(error, response) {\n\t\t\t\tif (WebRTCConnection.handled) {\n\t\t\t\t\treject(new TypeError(\"Response already handled\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tWebRTCConnection.handled = true;\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else if (response) {\n\t\t\t\t\tresolve(response);\n\t\t\t\t} else {\n\t\t\t\t\treject(new TypeError(\"No response\"));\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t\tWebRTCConnection.timeoutId = setTimeout(\n\t\t\t() => WebRTCConnection.handle(new TypeError(\"Request timed out\")),\n\t\t\tDEFAULT_TIMEOUT_MS,\n\t\t);\n\t\treturn WebRTCConnection;\n\t}\n\n\tfunction createConnection(\n\t\trequest: Request,\n\t\tresolve: (response: Response) => void,\n\t\treject: (error: Error) => void,\n\t) {\n\t\tlet connectionId = randomUInt32();\n\t\twhile (responses.has(connectionId)) {\n\t\t\tconnectionId = randomUInt32();\n\t\t}\n\t\tconst connection = createWebRTCConnection(\n\t\t\tconnectionId,\n\t\t\trequest,\n\t\t\tresolve,\n\t\t\treject,\n\t\t);\n\t\tresponses.set(connectionId, connection);\n\t\treturn connection;\n\t}\n\n\tasync function writeRequest(connectionId: number, request: Request) {\n\t\tconst url = new URL(request.url);\n\t\tconst connectionIdBytes = integerToBytes(new Uint8Array(4), connectionId);\n\t\tchannel.send(\n\t\t\tencodeLine(\n\t\t\t\ttextEncoder,\n\t\t\t\tconnectionIdBytes,\n\t\t\t\t`${request.method} ${url.pathname + url.search} ${PROTOCAL}`,\n\t\t\t),\n\t\t);\n\t\trequest.headers.forEach((value, key) => {\n\t\t\tchannel.send(\n\t\t\t\tencodeLine(textEncoder, connectionIdBytes, `${key}: ${value}`),\n\t\t\t);\n\t\t});\n\t\tchannel.send(encodeLine(textEncoder, connectionIdBytes, \"\\r\\n\"));\n\t\tif (request.body) {\n\t\t\tconst reader = request.body.getReader();\n\t\t\twhile (true) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif (value) {\n\t\t\t\t\tchannel.send(concatUint8Array(connectionIdBytes, value));\n\t\t\t\t}\n\t\t\t\tif (done) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tchannel.send(encodeLine(textEncoder, connectionIdBytes, \"\\r\\n\"));\n\t}\n\n\tasync function onConnectionMessage(connectionId: number, line: Uint8Array) {\n\t\tconst response = responses.get(connectionId);\n\t\tif (response) {\n\t\t\tif (!response.readStatus) {\n\t\t\t\tresponse.readStatus = true;\n\t\t\t\tconst [_version, status, statusText] = textDecoder\n\t\t\t\t\t.decode(line)\n\t\t\t\t\t.split(/\\s+/, 3);\n\t\t\t\tresponse.status = Number.parseInt(status);\n\t\t\t\tresponse.statusText = statusText;\n\t\t\t} else if (!response.readHeaders) {\n\t\t\t\tif (line[0] === R && line[1] === N) {\n\t\t\t\t\tresponse.readHeaders = true;\n\t\t\t\t\tresponse.handle(\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\twebRTCConnectionToNativeResponse(response),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst [key, value] = textDecoder.decode(line).split(/\\:\\s+/);\n\t\t\t\t\tresponse.headers.append(key, value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait response.writer.ready;\n\t\t\t\tif (line[0] === R && line[1] === N) {\n\t\t\t\t\tresponses.delete(connectionId);\n\t\t\t\t\tclearTimeout(response.timeoutId);\n\t\t\t\t\tresponse.timeoutId = undefined;\n\t\t\t\t\tawait response.writer.close();\n\t\t\t\t} else {\n\t\t\t\t\tawait response.writer.write(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function onMessage(event: MessageEvent) {\n\t\tconst array = new Uint8Array(event.data);\n\t\tconst connectionId = bytesToInteger(array);\n\t\tawait onConnectionMessage(connectionId, array.slice(4));\n\t}\n\tchannel.addEventListener(\"message\", onMessage);\n\n\tfunction fetch(\n\t\tinput: RequestInfo | URL,\n\t\tinit?: RequestInit,\n\t): Promise<Response> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst request = new Request(input, init);\n\t\t\tconst connection = createConnection(request, resolve, reject);\n\t\t\twriteRequest(connection.connectionId, request);\n\t\t});\n\t}\n\n\tfetch.destroy = () => channel.removeEventListener(\"message\", onMessage);\n\n\treturn fetch;\n}\n","import { bytesToInteger, integerToBytes } from \"@aicacia/hash\";\nimport {\n\tDEFAULT_TIMEOUT_MS,\n\tN,\n\tPROTOCAL,\n\tR,\n\tconcatUint8Array,\n\tencodeLine,\n\tstatusCodeToStatusText,\n} from \"./utils\";\n\ninterface WebRTCConnection {\n\treadHeaders: boolean;\n\tmethod: string;\n\tpath: string;\n\theaders: Headers;\n\tstream: TransformStream<Uint8Array, Uint8Array>;\n\twriter: WritableStreamDefaultWriter<Uint8Array>;\n\ttimeoutId?: ReturnType<typeof setTimeout>;\n}\n\nfunction createWebRTCConnection(\n\tmethod: string,\n\tpath: string,\n): WebRTCConnection {\n\tconst stream = new TransformStream<Uint8Array>();\n\treturn {\n\t\treadHeaders: false,\n\t\tmethod,\n\t\tpath,\n\t\theaders: new Headers(),\n\t\tstream,\n\t\twriter: stream.writable.getWriter(),\n\t};\n}\n\nfunction webRTCConnectionToNativeRequest(\n\twebRTCConnection: WebRTCConnection,\n): Request {\n\treturn new Request(`webrtc-http:${webRTCConnection.path}`, {\n\t\tmethod: webRTCConnection.method,\n\t\theaders: webRTCConnection.headers,\n\t\tbody:\n\t\t\twebRTCConnection.method === \"GET\" || webRTCConnection.method === \"HEAD\"\n\t\t\t\t? null\n\t\t\t\t: webRTCConnection.stream.readable,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-expect-error\n\t\tduplex: \"half\",\n\t});\n}\n\nexport function createWebRTCServer(\n\tchannel: RTCDataChannel,\n\thandler: (request: Request) => Promise<Response> | Response,\n) {\n\tconst requests = new Map<number, WebRTCConnection>();\n\tconst textEncoder = new TextEncoder();\n\tconst textDecoder = new TextDecoder();\n\n\tasync function writeResponse(requestId: number, response: Response) {\n\t\tconst requestIdBytes = integerToBytes(new Uint8Array(4), requestId);\n\t\tchannel.send(\n\t\t\tencodeLine(\n\t\t\t\ttextEncoder,\n\t\t\t\trequestIdBytes,\n\t\t\t\t`${PROTOCAL} ${response.status} ${statusCodeToStatusText(response.status)}`,\n\t\t\t),\n\t\t);\n\t\tresponse.headers.forEach((value, key) => {\n\t\t\tchannel.send(encodeLine(textEncoder, requestIdBytes, `${key}: ${value}`));\n\t\t});\n\t\tchannel.send(encodeLine(textEncoder, requestIdBytes, \"\\r\\n\"));\n\t\tif (response.body) {\n\t\t\tconst reader = response.body.getReader();\n\t\t\twhile (true) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif (value) {\n\t\t\t\t\tchannel.send(concatUint8Array(requestIdBytes, value));\n\t\t\t\t}\n\t\t\t\tif (done) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tchannel.send(encodeLine(textEncoder, requestIdBytes, \"\\r\\n\"));\n\t}\n\n\tasync function handle(requestId: number, request: Request) {\n\t\tconst response = await handler(request);\n\t\tawait writeResponse(requestId, response);\n\t}\n\n\tasync function onConnectionMessage(requestId: number, line: Uint8Array) {\n\t\tconst request = requests.get(requestId);\n\t\tif (!request) {\n\t\t\tconst [method, path, version] = textDecoder.decode(line).split(/\\s+/);\n\t\t\tif (method && path && version) {\n\t\t\t\tconst request = createWebRTCConnection(method, path);\n\t\t\t\trequests.set(requestId, request);\n\t\t\t\trequest.timeoutId = setTimeout(\n\t\t\t\t\t() => requests.delete(requestId),\n\t\t\t\t\tDEFAULT_TIMEOUT_MS,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!request.readHeaders) {\n\t\t\t\tif (line[0] === R && line[1] === N) {\n\t\t\t\t\trequest.readHeaders = true;\n\t\t\t\t\tawait handle(requestId, webRTCConnectionToNativeRequest(request));\n\t\t\t\t} else {\n\t\t\t\t\tconst [key, value] = textDecoder.decode(line).split(/\\:\\s+/, 2);\n\t\t\t\t\trequest.headers.append(key, value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait request.writer.ready;\n\t\t\t\tif (line[0] === R && line[1] === N) {\n\t\t\t\t\trequests.delete(requestId);\n\t\t\t\t\tclearTimeout(request.timeoutId);\n\t\t\t\t\trequest.timeoutId = undefined;\n\t\t\t\t\tawait request.writer.close();\n\t\t\t\t} else {\n\t\t\t\t\tawait request.writer.write(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function onMessage(event: MessageEvent) {\n\t\tconst array = new Uint8Array(event.data);\n\t\tconst requestId = bytesToInteger(array);\n\t\tawait onConnectionMessage(requestId, array.slice(4));\n\t}\n\tchannel.addEventListener(\"message\", onMessage);\n\n\treturn () => {\n\t\tchannel.removeEventListener(\"message\", onMessage);\n\t};\n}\n"],"names":["PROTOCAL","R","charCodeAt","N","encodeLine","encoder","idBytes","line","concatUint8Array","encode","a","b","bytes","Uint8Array","length","set","randomUInt32","Math","random","MAX_INT","createWebRTCFetch","channel","responses","Map","textEncoder","TextEncoder","textDecoder","TextDecoder","createConnection","request","resolve","reject","connectionId","has","connection","stream","TransformStream","WebRTCConnection","url","URL","handled","readStatus","readHeaders","headers","Headers","status","statusText","writer","writable","getWriter","handle","error","response","TypeError","timeoutId","setTimeout","createWebRTCConnection","async","onConnectionMessage","get","ready","delete","clearTimeout","undefined","close","write","webRTCConnection","Response","readable","duplex","Object","defineProperty","value","pathname","search","webRTCConnectionToNativeResponse","key","decode","split","append","_version","Number","parseInt","onMessage","event","array","data","bytesToInteger","slice","fetch","input","init","Promise","Request","connectionIdBytes","integerToBytes","send","method","forEach","body","reader","getReader","done","read","writeRequest","addEventListener","destroy","removeEventListener","createWebRTCServer","handler","requests","requestId","requestIdBytes","statusCode","statusCodeToStatusText","writeResponse","path","version"],"mappings":"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"}